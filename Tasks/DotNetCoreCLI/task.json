{
    "id": "5541a522-603c-47ad-91fc-a4b1d163081b",
    "name": "DotNetCoreCLI",
    "friendlyName": ".NET Core",
    "description": "Build, test, package, or publish a dotnet application, or run a custom dotnet command. For package commands, supports NuGet.org and authenticated feeds like Package Management and MyGet.",
    "author": "Microsoft Corporation",
    "helpMarkDown": "[More Information](https://go.microsoft.com/fwlink/?linkid=832194)",
    "category": "Build",
    "visibility": [
        "Build",
        "Release"
    ],
    "runsOn": [
        "Agent"
    ],
    "demands": [],
    "preview": true,
    "version": {
        "Major": 2,
        "Minor": 0,
        "Patch": 7
    },
    "minimumAgentVersion": "2.0.0",
    "instanceNameFormat": "dotnet $(command)",
    "groups": [
        {
            "name": "restoreAuth",
            "displayName": "Feeds and authentication",
            "isExpanded": true,
            "visibleRule": "command = restore"
        },
        {
            "name": "restoreAdvanced",
            "displayName": "Advanced",
            "isExpanded": false,
            "visibleRule": "command = restore"
        },
        {
            "name": "pushAuth",
            "displayName": "Destination feed and authentication",
            "isExpanded": true,
            "visibleRule": "command = push"
        },
        {
            "name": "pushAdvanced",
            "displayName": "Advanced",
            "isExpanded": false,
            "visibleRule": "command = push"
        },
        {
            "name": "packOptions",
            "displayName": "Pack options",
            "isExpanded": false,
            "visibleRule": "command = pack"
        },
        {
            "name": "packAdvanced",
            "displayName": "Advanced",
            "isExpanded": false,
            "visibleRule": "command = pack"
        }
    ],
    "inputs": [
        {
            "name": "command",
            "type": "pickList",
            "label": "Command",
            "defaultValue": "build",
            "required": true,
            "helpMarkDown": "The dotnet command to run. Select 'Custom' to add arguments or use a command not listed here.",
            "options": {
                "build": "build",
                "push": "nuget push",
                "pack": "pack",
                "publish": "publish",
                "restore": "restore",
                "run": "run",
                "test": "test",
                "custom": "custom"
            },
            "properties": {
                "EditableOptions": "False"
            }
        },
        {
            "name": "publishWebProjects",
            "type": "boolean",
            "visibleRule": "command = publish",
            "label": "Publish Web Projects",
            "defaultValue": "true",
            "required": true,
            "helpMarkDown": "If true, the task will try to find the web projects in the repository and run the publish command on them. Web projects are identified by presence of either a web.config file or wwwroot folder in the directory."
        },
        {
            "name": "projects",
            "type": "multiLine",
            "label": "Path to project(s)",
            "defaultValue": "",
            "visibleRule": "command = build || command = restore || command = run || command = test || command = custom || publishWebProjects = false",
            "required": false,
            "helpMarkDown": "The path to the csproj file(s) to use. You can use wildcards (e.g. */.csproj for all .csproj files in all subfolders)."
        },
        {
            "name": "custom",
            "type": "string",
            "label": "Custom command",
            "defaultValue": "",
            "helpMarkDown": "The command to pass to dotnet.exe for execution.",
            "required": true,
            "visibleRule": "command = custom"
        },
        {
            "name": "arguments",
            "type": "string",
            "label": "Arguments",
            "defaultValue": "",
            "visibleRule": "command = build || command = publish || command = run || command = test || command = custom",
            "required": false,
            "helpMarkDown": "Arguments to the selected command. For example, build configuration, output folder, runtime. The arguments depend on the command selected."
        },
        {
            "name": "zipAfterPublish",
            "type": "boolean",
            "visibleRule": "command = publish",
            "label": "Zip Published Projects",
            "defaultValue": "true",
            "required": false,
            "helpMarkDown": "If true, folder created by the publish command will be zipped."
        },
        {
            "name": "modifyOutputPath",
            "type": "boolean",
            "visibleRule": "command = publish",
            "label": "Add project name to publish path",
            "defaultValue": "true",
            "required": false,
            "helpMarkDown": "If true, folders created by the publish command will have project file name prefixed to their folder names when output path is specified explicitly in arguments. This is useful if you want to publish multiple projects to the same folder."
        },
        {
            "name": "selectOrConfig",
            "type": "radio",
            "label": "Feeds to use",
            "defaultValue": "config",
            "helpMarkDown": "You can either select a feed from VSTS and/or NuGet.org here, or commit a nuget.config file to your source code repository and set its path here.",
            "required": "true",
            "options": {
                "select": "Feed(s) I select here",
                "config": "Feeds in my NuGet.config"
            },
            "groupName": "restoreAuth"
        },
        {
            "name": "feedRestore",
            "type": "pickList",
            "label": "Use packages from this VSTS/TFS feed",
            "defaultValue": "",
            "helpMarkDown": "Include the selected feed in the generated NuGet.config. You must have Package Management installed and licensed to select a feed here.",
            "required": "false",
            "groupName": "restoreAuth",
            "visibleRule": "selectOrConfig = select",
            "properties": {
                "EditableOptions": "True"
            }
        },
        {
            "name": "includeNuGetOrg",
            "type": "boolean",
            "label": "Use packages from NuGet.org",
            "defaultValue": "true",
            "helpMarkDown": "Include NuGet.org in the generated NuGet.config.",
            "required": "false",
            "groupName": "restoreAuth",
            "visibleRule": "selectOrConfig = select"
        },
        {
            "name": "nugetConfigPath",
            "type": "filePath",
            "label": "Path to NuGet.config",
            "defaultValue": "",
            "helpMarkDown": "The NuGet.config in your repository that specifies the feeds from which to restore packages.",
            "required": "false",
            "groupName": "restoreAuth",
            "visibleRule": "selectOrConfig = config"
        },
        {
            "name": "externalEndpoints",
            "type": "connectedService:ExternalNuGetFeed",
            "label": "Credentials for feeds outside this account/collection",
            "required": false,
            "helpMarkDown": "Credentials to use for external registries located in the selected NuGet.config. For feeds in this account/collection, leave this blank; the buildâ€™s credentials are used automatically.",
            "properties": {
                "EditableOptions": "False",
                "MultiSelectFlatList": "True"
            },
            "groupName": "restoreAuth",
            "visibleRule": "selectOrConfig = config"
        },
        {
            "name": "noCache",
            "type": "boolean",
            "label": "Disable local cache",
            "defaultValue": "false",
            "helpMarkDown": "Prevents NuGet from using packages from local machine caches.",
            "required": "false",
            "groupName": "restoreAdvanced"
        },
        {
            "name": "packagesDirectory",
            "type": "string",
            "label": "Destination directory",
            "defaultValue": "",
            "helpMarkDown": "Specifies the folder in which packages are installed. If no folder is specified, packages are restored into the default NuGet package cache.",
            "required": "false",
            "groupName": "restoreAdvanced"
        },
        {
            "name": "verbosityRestore",
            "type": "pickList",
            "label": "Verbosity",
            "defaultValue": "Detailed",
            "helpMarkDown": "Specifies the amount of detail displayed in the output.",
            "required": "false",
            "groupName": "restoreAdvanced",
            "options": {
                "-": "-",
                "Quiet": "Quiet",
                "Minimal": "Minimal",
                "Normal": "Normal",
                "Detailed": "Detailed",
                "Diagnostic": "Diagnostic"
            }
        },
        {
            "name": "searchPatternPush",
            "type": "filePath",
            "label": "Path to NuGet package(s) to publish",
            "defaultValue": "$(Build.ArtifactStagingDirectory)/*.nupkg",
            "helpMarkDown": "The pattern to match or path to nupkg files to be uploaded. Multiple patterns can be separated by a semicolon.",
            "required": true,
            "visibleRule": "command = push"
        },
        {
            "name": "nuGetFeedType",
            "type": "radio",
            "label": "Target feed location",
            "required": true,
            "defaultValue": "internal",
            "options": {
                "internal": "This account/collection",
                "external": "External NuGet server (including other accounts/collections)"
            },
            "visibleRule": "command = push"
        },
        {
            "name": "feedPublish",
            "type": "pickList",
            "label": "Target feed",
            "defaultValue": "",
            "required": true,
            "helpMarkDown": "Select a feed hosted in this account. You must have Package Management installed and licensed to select a feed here.",
            "visibleRule": "command = push && nuGetFeedType = internal"
        },
        {
            "name": "externalEndpoint",
            "type": "connectedService:ExternalNuGetFeed",
            "label": "NuGet server",
            "required": true,
            "helpMarkDown": "The NuGet service endpoint that contains the external NuGet serverâ€™s credentials.",
            "visibleRule": "command = push && nuGetFeedType = external"
        },
        {
            "name": "searchPatternPack",
            "type": "filePath",
            "label": "Path to csproj or nuspec file(s) to pack",
            "defaultValue": "**/*.csproj",
            "helpMarkDown": "Pattern to search for csproj or nuspec files to pack.\n\nYou can separate multiple patterns with a semicolon, and you can make a pattern negative by prefixing it with '-:'. Example: `**\\*.csproj;-:**\\*.Tests.csproj`",
            "required": true,
            "visibleRule": "command = pack"
        },
        {
            "name": "configurationToPack",
            "type": "string",
            "label": "Configuration to Package",
            "defaultValue": "$(BuildConfiguration)",
            "helpMarkDown": "When using a csproj file this specifies the configuration to package",
            "required": false,
            "visibleRule": "command = pack"
        },
        {
            "name": "outputDir",
            "type": "filePath",
            "label": "Package Folder",
            "defaultValue": "$(Build.ArtifactStagingDirectory)",
            "helpMarkDown": "Folder where packages will be created. If empty, packages will be created alongside the csproj file.",
            "required": false,
            "visibleRule": "command = pack"
        },
        {
            "name": "nobuild",
            "type": "boolean",
            "label": "Do not build",
            "defaultValue": "false",
            "helpMarkDown": "Don't build the project before packing. Corresponds to the --no-build command line parameter.",
            "required": false,
            "visibleRule": "command = pack"
        },
        {
            "name": "versioningScheme",
            "type": "pickList",
            "label": "Automatic package versioning",
            "defaultValue": "off",
            "helpMarkDown": "Cannot be used with include referenced projects. If you choose 'Use the date and time', this will generate a [SemVer](http://semver.org/spec/v1.0.0.html)-compliant version formatted as `X.Y.Z-ci-datetime` where you choose X, Y, and Z.\n\nIf you choose 'Use an environment variable', you must select an environment variable and ensure it contains the version number you want to use.\n\nIf you choose 'Use the build number', this will use the build number to version your package. **Note:** Under Options set the build number format to be '[$(BuildDefinitionName)_$(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r)](https://go.microsoft.com/fwlink/?LinkID=627416)'.",
            "required": true,
            "groupName": "packOptions",
            "options": {
                "off": "Off",
                "byPrereleaseNumber": "Use the date and time",
                "byEnvVar": "Use an environment variable",
                "byBuildNumber": "Use the build number"
            }
        },
        {
            "name": "versionEnvVar",
            "type": "string",
            "label": "Environment variable",
            "defaultValue": "",
            "helpMarkDown": "Enter the variable name without $, $env, or %.",
            "required": true,
            "groupName": "packOptions",
            "visibleRule": "versioningScheme = byEnvVar"
        },
        {
            "name": "requestedMajorVersion",
            "type": "string",
            "label": "Major",
            "defaultValue": "1",
            "helpMarkDown": "The 'X' in version [X.Y.Z](http://semver.org/spec/v1.0.0.html)",
            "required": true,
            "groupName": "packOptions",
            "visibleRule": "versioningScheme = byPrereleaseNumber"
        },
        {
            "name": "requestedMinorVersion",
            "type": "string",
            "label": "Minor",
            "defaultValue": "0",
            "helpMarkDown": "The 'Y' in version [X.Y.Z](http://semver.org/spec/v1.0.0.html)",
            "required": true,
            "groupName": "packOptions",
            "visibleRule": "versioningScheme = byPrereleaseNumber"
        },
        {
            "name": "requestedPatchVersion",
            "type": "string",
            "label": "Patch",
            "defaultValue": "0",
            "helpMarkDown": "The 'Z' in version [X.Y.Z](http://semver.org/spec/v1.0.0.html)",
            "required": true,
            "groupName": "packOptions",
            "visibleRule": "versioningScheme = byPrereleaseNumber"
        },
        {
            "name": "buildProperties",
            "type": "string",
            "label": "Additional build properties",
            "defaultValue": "",
            "required": false,
            "helpMarkDown": "Specifies a list of token = value pairs, separated by semicolons, where each occurrence of $token$ in the .nuspec file will be replaced with the given value. Values can be strings in quotation marks.",
            "groupName": "packAdvanced"
        },
        {
            "name": "verbosityPack",
            "type": "pickList",
            "label": "Verbosity",
            "defaultValue": "Detailed",
            "helpMarkDown": "Specifies the amount of detail displayed in the output.",
            "required": "false",
            "groupName": "packAdvanced",
            "options": {
                "-": "-",
                "Quiet": "Quiet",
                "Minimal": "Minimal",
                "Normal": "Normal",
                "Detailed": "Detailed",
                "Diagnostic": "Diagnostic"
            }
        }
    ],
    "dataSourceBindings": [
        {
            "target": "feedRestore",
            "endpointId": "tfs:feed",
            "endpointUrl": "{{endpoint.url}}/_apis/packaging/feeds",
            "resultSelector": "jsonpath:$.value[*]",
            "resultTemplate": "{ \"Value\" : \"{{{id}}}\", \"DisplayValue\" : \"{{{name}}}\" }"
        },
        {
            "target": "feedPublish",
            "endpointId": "tfs:feed",
            "endpointUrl": "{{endpoint.url}}/_apis/packaging/feeds",
            "resultSelector": "jsonpath:$.value[*]",
            "resultTemplate": "{ \"Value\" : \"{{{id}}}\", \"DisplayValue\" : \"{{{name}}}\" }"
        }
    ],
    "execution": {
        "Node": {
            "target": "dotnetcore.js",
            "argumentFormat": ""
        }
    },
    "messages": {
        "BuildIdentityPermissionsHint": "For internal feeds, make sure the build service identity '%s' [%s] has access to the feed.",
        "Error_AutomaticallyVersionReleases": "Autoversion: Getting version number from build option is not supported in releases",
        "Error_CommandNotRecognized": "The command %s was not recognized.",
        "Error_NoSourceSpecifiedForPush": "No source was specified for push",
        "Error_NoValueFoundForEnvVar": "No value was found for the provided environment variable.",
        "Error_NoVersionFoundInBuildNumber": "Could not find version number data in the following environment variable: BUILD_BUILDNUMBER. The value of the variable should contain a substring with the following formats: X.Y.Z or X.Y.Z.A where A, X, Y, and Z are positive integers.",
        "Error_PackageFailure": "An error ocurred while trying to pack the files.",
        "Error_PushNotARegularFile": "%s is not a file. Check the 'Path/Pattern to nupkg' property of the task.",
        "Error_ApiKeyNotSupported": "DotNetCore currently does not support using an encrypted Api Key.",
        "Info_AttemptingToPackFile": "Attempting to pack file: ",
        "Info_MatchingUrlWasFoundSettingAuth": "Using authentication information for the following URI: ",
        "Info_NoPackagesMatchedTheSearchPattern": "No packages matched the search pattern.",
        "Info_NoFilesMatchedTheSearchPattern": "No files matched the search pattern.",
        "Info_ResolvedToolFromCache": "Resolved from tool cache: %s",
        "Info_SavingTempConfig": "Saving NuGet.config to a temporary config file.",
        "Info_UsingVersion": "Using version: %s",
        "PackagesFailedToInstall": "Packages failed to restore",
        "PackagesFailedToPublish": "Packages failed to publish",
        "PackagesInstalledSuccessfully": "Packages were restored successfully",
        "PackagesPublishedSuccessfully": "Packages were published successfully",
        "UnknownFeedType": "Unknown feed type '%s'",
        "Warning_AutomaticallyVersionReferencedProjects": "The automatic package versioning and include referenced projects options do not work together. Referenced projects will not inherit the custom version provided by the automatic versioning settings.",
        "Warning_MoreThanOneVersionInBuildNumber": "Found more than one instance of version data in BUILD_BUILDNUMBER.Assuming first instance is version.",
        "dotnetCommandFailed": "Dotnet command failed with non-zero exit code on the following projects : %s",
        "noProjectFilesFound": "Project file(s) matching the specified pattern were not found.",
        "noPublishFolderFoundToZip": "A publish folder could not be found to zip for project file: %s.",
        "noWebProjctFound": "No web project was found in the repository. Web projects are identified by presence of either a web.config file or wwwroot folder in the directory.",
        "zipFailed": "Zip failed with error: %s"
    }
}
